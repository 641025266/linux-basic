24
iptables: linux系统防火墙名字叫做 netfilter，而iptables只是它的一个实现工具。Iptables 可以用来设置、维护和检查Linux内核的IP包过滤规则的。
iptables/netfileter的关系
iptables：是应用程序，负责添加规则的
netfilter：kernel代码，是一个hooks-function，是用来具体执行防火规则的
netfilter包含prerouting,forward,postrouting,input,output这5个钩子函数
netfilter包含如下4张表
      1）filter：过滤，防火墙作用
      2）nat：网络地址转换
      3）mangle：拆解报文，按需修改。常用于打标记，MARK
      4) raw:关闭在nat表中启用的连接追踪机制
添加规则时的考量点
      1）filter表主要针对本机，nat表主要针对后端主机
      2）要实现何种功能，判断规则添加在哪个表上
      3) 报文流经位置，判断规则添加在哪个链上

man iptables 查看帮助
iptables -nvL,表示iptables的查看
iptables -nvL --line-numbers，同时显示链上规则编号
iptables [-t table] subcommand chain [match..] [target]
          -t table:raw,mangle,nat,filter
         subcommand(链管理）
           -N:增加一条自定义链（大写）
           -X:删除一条自定义链（大写）
           -P:设置链的默认策略（只能是ACCEPT/DROP）
           -E:rename
实列：
iptables  -P  INPUT ACCEPT/DROP
链中的规则管理：
          -A:追加一条规则，默认为最后一个
          -I:插入，默认为第一个 
          -D：delete
              （1）rules specification
               (2) rule number （配合iptables -nvL --line-numbers使用）
          -R replace
          -F:清空
          -Z：zero，设置为0
          --list-rules|-S:以iptables-save命令的格式显示链上的规则,显示格式更好看
实列：
iptables -A INPUT  -i eth1 -p  tcp --dport 80 -j DROP （p是小写）
iptables -nvL  --line-numbers 
iptables -D INPUT 1 
ipables -S -t nat 

iptables的匹配条件：
    1）基本匹配
       [i] -s 源地址匹配（i表示取反）
       [i] -d 目标地址匹配（i表示取反）
       [i] -i 限制报文的流入接口，只能用于prerouting，input,forward(重要）
       [i] -o 限制报文的流出接口，只能用于output，postrouting，forward（重要


实列：
iptables  -A INPUT -i eth1 -s 192.168.139.0/24   -j ACCEPT
    2）扩展匹配：需要加载扩展模块
       （1）隐式扩展：可以不使用-m选项专门加载相应模块，前提是要用-p（小写p）选项匹配何种协议
        [i]-p tcp 
           [i]--sport port
           [i]--dport port
           [i]--tcp-flags mask comp 检查报文中mask指明的tcp标志位（tcp的标志位有URG,PUSH,SYN,ACK,FIN,RST这6个，回想TCP的有限状态机），而这些标志位comp中必须为1
实列：
iptables -A INPUT -p tcp   --tcp-flags  syn,fin,rst,ack   syn
    (表示我要检查的是syn,fin,rst,ack标志位，其中syn必须为1，其他必须为0，实际就是对tcp三次握手中的第一次进行放行）
iptables -A INPUT -p tcp   --tcp-flags  syn,fin,rst,ack   fin，ack
   （实际检测的就是断开时的报文）
       [i]-p udp 
           [i]--sport port
           [i]--dport port
       [i]-p icmp --icmp-type  type/code
             type/code常用：（基本针对ping操作）
                      0/0:echo reply,显示响应
                      8/0:echo reques,显示请求

实列：
iptables -A INPUT -s 192.168.139.170  -p icmp  -j DROP （此时无法ping通）
      （2)显示扩展：必须加-m
          -m multiport --sports port1,port2..或者port1：port2(多个离散port用逗号隔开，连续端口用-隔开）
          -m multiport --sports port1,port2..
          -m multiport --dports port1,port2..
实列：
iptables -A INPUT -d 192.168.139.171 -p tcp -m multiport  --dports 22,80 -j DROP
         -m iprange --src-range，源地址
         -m iprange --dst-range，目标地址
实列：
iptables -A INPUT -m iprange --src-range 192.168.139.171-192.168.139.1809 -d 192.168.139.189  -p tcp --dport 23 -j ACCEPT （地址范围用-隔开）

         -m string --algo {bm|kmp}  [i]--string pattern
实列：     
iptables -A OUTPUT -s 192.168.139.171 -p tcp --sport 80 -m string --algo bm --string 'old' -j REJECT  此处的-s指的就是本机地址
        在output链上增加规则，对应源地址为192.168.139.170的tcp 80端口，如果响应报文中含有‘old'，就不能响应给客户端。但其他的http服务可以正常响应
         -m time --datestart YYYY[-MM[-DD[Thh[:mm[:ss]]]]]起始时间，比如2017-10-05-18:57
         -m time --datestop  YYYY[-MM[-DD[Thh[:mm[:ss]]]]]结束时间
         -m time --timestart hh:mm:[ss 起始时间
         -m time --timestop  hh:mm:[ss 结束时间
         -m time --monthdays  day,day,..
         -m time --weekdays  day,day,.. 
         -m connlimit --connlimit-upto # 根据每个客户端主机做并发连接控制
         -m limit --limit rate/second|minute|hour|day  --limit-burst number 
                          rate/second|minute|hour|day  表示基于令牌桶算法对报文的速率做匹配
                          --limit-burst number         表示第一次的峰值数据

案例：防止 DoS 攻击
iptables -A INPUT -p tcp --dport 80 -m limit --limit 25/minute --limit-burst 100 -j ACCEPT

         -m state --state #(#可以是INVALID,ESTABLISHED,NEW,RELATED,UNTRACKED)
            state：是conntrack（连接追踪）的子集，用于对报文的状态做连接追踪
                   INVALID，无法识别的连接
                   ESTABLISHED，连接追踪模块中已经存在记录的连接
                   NEW，连接追踪模块中不存在的连接
                   RELATED，相关联的连接
                   UNTRACKED，未追踪的连接
cat /proc/net/nf_conntrack ,已经追踪到的并记录下来的连接
cat /proc/sys/net/nf_conntrack_max，连接追踪功能所能够记录的最大连接数量，可以调整
     调整其最大连接数的方式(选择其中一种方式即可）
     sysctl -w net.nf_conntrack_max=30000
     echo 3000 >/proc/sys/net/nf_conntrack_max
当追踪连接模块满载时，后续的新连接有可能会超时，解决办法为：
    （1）net.nf_conntrack_max，改大这个参数
    （2）降低nf_conntrack条目的超时时长
ftp的2种模式比较。
答：主动模式传送数据时是“服务器”连接到“客户端”的端口；被动模式传送数据是“客户端”连接到“服务器”的端口。
    主动模式需要客户端必须开放端口给服务器，很多客户端都是在防火墙内，开放端口给FTP服务器访问比较困难。被动模式只需要服务器端开放端口给客户端连接就行了。

主动FTP：  
命令连接：客户端 >1024端口 -> 服务器 21端口,表示客户端主动联系服务器端 
数据连接：客户端 >1024端口 <- 服务器 20端口，表示服务器端主动联系客户端

被动FTP：
命令连接：客户端 >1024端口 -> 服务器 21端口
数据连接：客户端 >1024端口 -> 服务器 >1024端口


放行被动模式ftp服务的iptables具体操作步骤：
     1）加载nf_conntrack_ftp
        modprobe   nf_conntrack_ftp （卸载用-r选项）
     2）放行命令连接
        iptables -A INPUT  -p tcp  --dport 21 -m state --state NEW,ESTABLISHED -j ACCEPT (NEW,ESTABLISHED要大写）
        iptables -A OUTPUT -p tcp  --sport 21 -m state --state ESTABLISHED -j ACCEPT
     3）放行数据连接
        iptables -A INPUT  -p tcp -m state --state RELATED,ESTABLISHED -j ACCEPT
        iptables -A OUTPUT -p tcp -m state --state ESTABLISHED -j ACCEPT

iptables规则的有效期限：iptables命令添加的规则，手动删除前都有效
保存iptables规则：
       iptables-save > /etc/sysconfig/iptables(默认路径），也可以是其他路径
重载预存的iptables规则：
       iptables-restore < /path to file 
自动生效规则文件的方法：
       1）把iptables的命令放在脚步文件中，让脚步文件开机自动运行，如/etc/rc.d/rc.local
       2) 用规则文件保存规则，开机时自动重载命令 ，即在/etc/rc.d/rc.local文件中增加iptables-restore < /path to file
处理动作：
    -j targetname [per-target-options]
     ACCEPT
     DROP
     REJECT
     RETURN(返回调用的链）
     REDIRECT ，端口重定向
     LOG 日志
     MARK，防火墙标记
     DNAT
     SNAT
     MASQUERADE,地址伪装

25-1
forward模型的配置注意事项：具体拓扑图参考第2本笔记中的图
    1)A主机的网关指向10.0.1.2
       ip route add 192.168.139.0/24 via 10.0.1.2   dev eth0
    2)C主机的网关指向192.168.139.134
       ip route add 10.0.1.0/24 via 192.168.139.134 dev eth0
    3)B主机的/proc/sys/net/ipv4/ip_forward要打开
       echo 1 > /proc/sys/net/ipv4/ip_forward
    4)增加如下iptables规则
       iptables -A FORWARD -s 10.0.1.0/24 -p icmp --icmp-type 8 -j ACCEPT  
       iptables -A FORWARD -d 10.0.1.0/24 -p icmp --icmp-type 0 -j ACCEPT 
       以上两条命令使得10.0.1.0/24可以ping通外部地址，但是外部地址不能ping通10.0.1.0/24
       0/0:echo reply,显示响应
       8/0:echo reques,显示请求
    5)增加一块网卡时，要确保/etc/sysconfig/network-scripts/ifcfg-eth#中的ONBOOT=ON，否则网卡启动不了
    6)更改网卡名称的具体操作步骤
      vim /etc/udev/rules.d/70-persistent-net.rules 
      vim /etc/sysconfig/network-scripts/ifcfg-eth#
      modprobe -r e1000
      modprobe e1000

25-2
处理动作(写规则时还要考虑是写在哪个角色的主机上）
LOG选项
  --log-level LEVEL (emerg,alert,error...)
  --log-prefix PREFIX，日志前缀
实列：
   iptables -I FORWARD  -s 10.0.1.0/24 -p tcp  --dport 80  -j LOG --log-prefix 'new connection'

REDIRECT选项
   --to-ports prot[-port]
实列：
    iptables -t nat -A  PREROUTING   -s 10.0.1.0/24 -p tcp  --dport 80  -j REDIRECT --to-ports 8080 (nat必须小写）
SNAT选项：只能用在NAT中的POSTROUTING中
   --to-source
实列：
    iptables -t nat -A  POSTROUTING   -s 10.0.1.0/24 -p tcp  --dport 80  -j SNAT --to-source   ip地址
    iptables -t nat -A  POSTROUTING   -s 10.8.0.0/24 -o eth0  -j SNAT --to-source  192.168.5.3-192.168.5.5 SNAT的时候，出口ip的地址范围可以是多个
DNAT选项：只能用在NAT中的POSTROUTING中
   --to-destination
实列：
    iptables -t nat -A  PREROUTING   -i eth0 -p tcp  --dport 80  -j DNAT --to-destination   192.168.139.177:80
MASQUERADE选项：只能用在NAT中的POSTROUTING中，且最好应用在动态获取外部地址的情景中。相当于是SNAT的特殊情景
实列：
    iptables -t nat -A  POSTROUTING   -d 10.0.1.0/24 -p tcp  --dport 80  -j MASQUERADE  
    如此配置的话，不用指定SNAT的目标ip了，不管现在eth0的出口获得了怎样的动态ip，MASQUERADE会自动读取eth0现在的ip地址然后做SNAT出去，这样就实现了很好的动态SNAT地址转换
iptables核心知识点总结
  -m iprange --src-range 
  -m iprange --dst-range
  -m multiport --sports  多个离散port用逗号隔开，连续端口用-隔开
  -m multiport --dports
  -p tcp   --sport|--dport   [--tcp-flags]
  -p udp   --sport|--dport
  -p icmp --icmp-type 
  -m time --datestart|--datestop|--timestart|--timestop|--monthdays|--weekdays
  -m string --algo {bm|kmp} --string pattern
  -m state  --state
  -t nat POSTROUTING -j SNAT  --to-source 
  -t nat POSTROUTING -j MASQUERADE
  -t nat PREROUTING  -j DNAT --to-destination 
  -t nat PREROUTING  -j REDIRECT --to-ports



案例：
包过滤防火墙与代理应用防火墙有什么区别，能列举几种相应的产品吗？
答案：
包过滤防火墙
   优点：工作在网络协议ip层，它只对ip包的源地址、目标地址及相应端口进行处理，因此速度比较快，能够处理的并发连接比较多，
   缺点：是对应用层的攻击无能为力。
   代表产品：iptables，windows等软件类防火墙。
代理服务器防火墙
   优点：将收到的IP包还原成高层协议的通讯数据，比如http连接信息，因此能够对基于高层协议的攻击进行拦截。
   缺点：处理速度比较慢，能够处理的并发数比较少。
   代表产品：一些审计类的防火墙，用户行为控制系统等。


面试题 
将211.154.203.84的8080端口映射到内部192.168.2.200的80上
iptables -t nat -A PREROUTING -d 211.154.203.84 -p tcp --dport 8080 -j DNAT --to--destination 192.168.2.200:80
在开启iptables防火墙的情况下，防火墙规则配置默认拒绝所有，请将192.168.0.150的3306端口映射到公网58.206.99.105的1056端口，能够正常访问数据库，写下详细的规则
相当于192.168.0.150是内网地址，58.206.99.105是外网地址
iptables  -t nat   -A PREROUTING -d 58.206.99.105 -p tcp --dport 1056 -j DNAT --to-destination 192.168.0.150:3306
iptables  -P INPUT -j DROP 默认拒绝所有
案例：
指定工作日的8点到18点期间才能访问445端口
iptables -A INPUT -p tcp --dport 445 -m time --weekdays Mon，Tus，Wed，Thu，Fri --timestart 08:00:00 —timestop 18:00:00 -j ACCEPT  
案例：
限定apache每秒钟连接数为1,峰值为3
iptables -A INPUT -p tcp --dport 80 -m limit --limit 1/second  --limit-burst 3 -j ACCEPT
案例：
同时允许443,80,1723,22,3306,11211,25,110,dns,ntp协议
iptables -I INPUT -p tcp -m multiport --dports 443,80,1723,22,3306,11211,25,110,53,123 -j ACCEPT
iptables -P INPUT DROP  这样除了上面那规则中提到的端口可以访问外，其他端口都是拒绝的。

tcpdump基本语法(同iptables规则，过滤ip，port，协议）
过滤主机
--------
- 抓取所有经过 eth1，目的或源地址是 192.168.1.1 的网络数据
# tcpdump -i eth1 host 192.168.1.1
- 源地址
# tcpdump -i eth1 src host 192.168.1.1
- 目的地址
# tcpdump -i eth1 dst host 192.168.1.1

过滤端口
--------
- 抓取所有经过 eth1，目的或源端口是 25 的网络数据
# tcpdump -i eth1 port 25
- 源端口
# tcpdump -i eth1 src port 25
- 目的端口
# tcpdump -i eth1 dst port 25

# tcpdump -i eth1 net 192.168
# tcpdump -i eth1 src net 192.168
# tcpdump -i eth1 dst net 192.168

协议过滤
--------
# tcpdump -i eth1 arp
# tcpdump -i eth1 ip
# tcpdump -i eth1 tcp
# tcpdump -i eth1 udp
# tcpdump -i eth1 icmp

常用表达式
----------
非 : !  或者 "not" (去掉双引号)
且 : && 或者 "and"
或 : || 或者 "or"
- 抓取所有经过 eth1，目的地址是 192.168.1.254 或 192.168.1.200 端口是 80 的 TCP 数据
# tcpdump -i eth1 '((tcp) and (port 80) and ((dst host 192.168.1.254) or (dst host192.168.1.200)))'
- 抓取所有经过 eth1，目标 MAC 地址是 00:01:02:03:04:05 的 ICMP 数据
# tcpdump -i eth1 '((icmp) and (ether dst host 00:01:02:03:04:05))'
- 抓取所有经过 eth1，目的网络是 192.168，但目的主机不是 192.168.1.200 的 TCP 数据
# tcpdump -i eth1 '((tcp) and ((dst net 192.168) and (not dst host 192.168.1.200)))'

- 只抓 SYN 包
# tcpdump -i eth1 'tcp[tcpflags] = tcp-syn'
- 抓 SYN, ACK
# tcpdump -i eth1 'tcp[tcpflags] & tcp-syn != 0 and tcp[tcpflags] & tcp-ack != 0'
抓 SMTP 数据
----------
# tcpdump -i eth1 '((port 25) and (tcp[(tcp[12]>>2):4] = 0x4d41494c))'
抓取数据区开始为"MAIL"的包，"MAIL"的十六进制为 0x4d41494c。
抓 HTTP GET 数据
--------------
# tcpdump -i eth1 'tcp[(tcp[12]>>2):4] = 0x47455420'
"GET "的十六进制是 47455420  
说明：G的ASSIC码是47，E的ASSIC码是45，T的ASSIC码是54，空格的ASSIC码是20。网上搜索ASSIC码即可
抓 SSH 返回
---------
# tcpdump -i eth1 'tcp[(tcp[12]>>2):4] = 0x5353482D'
"SSH-"的十六进制是 0x5353482D
# tcpdump -i eth1 '(tcp[(tcp[12]>>2):4] = 0x5353482D) and (tcp[((tcp[12]>>2)+4):2]= 0x312E)'抓老版本的 SSH 返回信息，如"SSH-1.99.."

- 抓 DNS 请求数据
# tcpdump -i eth1 udp dst port 53
其他
----
-c 参数对于运维人员来说也比较常用，因为流量比较大的服务器，靠人工 CTRL+C 还是抓的太多，于是可以用-c 参数指定抓多少个包。
# time tcpdump -nn -i eth0 'tcp[tcpflags] = tcp-syn' -c 10000 > /dev/null
上面的命令计算抓 10000 个 SYN 包花费多少时间，可以判断访问量大概是多少。

实时抓取端口号8000的GET包，然后写入GET.log
tcpdump -i eth0 '((port 8000) and (tcp[(tcp[12]>>2):4]=0x47455420))' -nnAl -w /tmp/GET.log
