8-1
bash脚本编程

$$ 是脚本运行的当前进程ID号
$0 是脚本本身的名字
	
脚本文件格式：
		
  第一行，顶格：#!/bin/bash 
		
  注释信息：#
		
  代码注释：
		
  缩进，适度添加空白行；
		
	
  语言：编程语法格式，库，算法和数据结构
	
  编程思想：
问题空间 --> 解空间
		
	
  变量：
局部变量
,本地变量
,环境变量
,位置参数变量
,特殊变量
		
	
  数据类型：字符型、数值型
		
  弱类型：字符型
		
	
     算术运算：
+, -, *, /, %, **

举例如下	
[root@node1 ~]# echo $((2**3))
                      8	
		
 let  VAR=expression
		
 VAR=$[expression]
		
 VAR=$((expression))
		
 VAR=$(expr argu1 argu2 argu3)
		
		
 注意：有些时候乘法符号需要转义；
		
		
增强型赋值：
			
  变量做某种算术运算后回存至此变量中；
				
   let i=$i+#
				
   let i+=#

   +=，-=，*=, /=, %=
			
			
自增：
VAR=$[$VAR+1]
 
      let VAR+=1

      let  VAR++
				
			
自减：
				
      VAR=$[$VAR-1]
				
      let  VAR-=1
				
      let  VAR--
				
	
练习：
		
  1、写一个脚本
计算/etc/passwd文件中的第10个用户和第20个用户的id号之和；
				
     id1=$(head -10  /etc/passwd | tail -1  | cut  -d:  -f3)
	 id1=$(sed -n '10p'  /etc/passwd | cut  -d:  -f3)
			
     id2=$(head -20  /etc/passwd | tail -1  | cut  -d:  -f3)
	 id2=$(sed -n '20p'  /etc/passwd | cut  -d:  -f3)
			
			
	
 2、写一个脚本
计算/etc/rc.d/init.d/functions和/etc/inittab文件的空白行数之和；
			
				
     grep "^[[:space:]]*$"   /etc/rc.d/init.d/functions | wc -l
     grep "^$"   /etc/rc.d/init.d/functions | wc -l，找出空白行 
条件测试：
		
      判断某需求是否满足，需要由测试机制来实现；
		
		
      如何编写测试表达式以实现所需的测试：
			
(1) 执行命令，并利用命令状态返回值来判断；
				
      0：成功
，1-255：失败
			
(2) 测试表达式		
    test  EXPRESSION 等效于[ EXPRESSION ]   []是判断符号
    举例：
    test -e  /var等效于 [ -e /var ]				
    [[ EXPRESSION ]]
注意：EXPRESSION两端必须有空白字符，否则为语法错误；
bash的测试类型：
    数值测试	
    字符串测试		
    文件测试		
数值测试：以下只能针对整数进行比较				
    -eq：是否等于； [ $num1 -eq $num2 ]		
    -ne：是否不等于；
    -gt：是否大于；		
    -ge：是否大于等于；		
    -lt：是否小于；		
    -le：是否小于等于；	
如果要对小数进行比较，做如下操作
]# echo '2.1>1.2'|bc  1表示是，0表示否
1
]# echo '2.1>=1.1'|bc
1
]# echo '2.1>3.2'|bc
0
]# echo '2.1==2.1'|bc
1
字符串测试：		
    ==：是否等于；			
    !=：是否不等于；		
    =~：左侧字符串是否能够被右侧的PATTERN所匹配；
    -z "STRING"：判断指定的字串是否为空；空则为真，不空则假；-z一定要写在前面			
    -n "STRING"：判断指定的字符串是否不空；不空则真，空则为假；				
注意：			
   (1) 字符串要加引用；			
   (2) 要使用[[ ]]；		
文件测试：			
   存在性测试				
      -a  FILE
或者-e  FILE ，文件的存在性测试，存在则为真，否则则为假；		
   存在性及类型测试	
      -b  FILE：是否存在并且为块设备文件；
      -c  FILE：是否存在并且为字符设备文件；
      -d  FILE：是否存在并且为目录文件,路径一定要加引号
      -f  FILE：是否存在并且为普通文件，文件名一定要见引号
      -h  FILE或 -L  FILE：是否存在并且为 符号链接文件；
      -p FILE：是否存在且为 命名管道文件；	
      -S  FILE：是否存在且为套接字文件；
（大写S）				
  文件权限测试：
					
      -r  FILE：是否存在并且 对当前用户可读；
					
      -w  FILE：是否存在并且 对当前用户可写；
					
      -x  FILE：是否存在并且 对当前用户可执行；
				
  特殊权限测试：
					
      -u  FILE：是否存在并且 拥有suid权限；
					
      -g  FILE：是否存在并且 拥有sgid权限；
					
      -k  FILE：是否存在并且 拥有sticky权限；
				
  文件是否有内容：
					
      -s  FILE：检测文件是否存在，且为‘非空白文件’			
  时间戳：
					
      -N FILE：文件自从上一次读操作后是否被修改过；
（比较少见）				
  从属关系测试：
					
      -O  FILE：当前用户是否为文件的属主；
					
      -G  FILE：当前用户是否属于文件的属组；
				
  双目测试：
					
     FILE1  -ef  FILE2：FILE1与FILE2是否指向同一个文件系统的相同inode的硬链接；
即判断是否为同一个文件，也可以理解为判断是否指向同一个innode				     FILE1  -nt  FILE2：FILE1是否新于FILE2；nt表示new than
					
     FILE1  -ot  FILE2：FILE1是否旧于FILE2；
					
			
组合测试条件：				
    逻辑运算：（重要）			
        第一种方式：				
              COMMAND1 && COMMAND2				
              COMMAND1 || COMMAND2		
              ! COMMAND (重要）		
              [ -O FILE ] && [ -r FILE ]		
        第二种方式：	
              EXPRESSION1  -a  EXPRESSION2				
              EXPRESSION1  -o  EXPRESSION2	
              ! EXPRESSION(重要）									
              [ -O FILE -a -x FILE ]
练习：将当前主机名称保存至hostName变量中；
       hostName=${hostname}--这是正规的变量引用
主机名如果为空，或者为localhost.localdomain，则将其设置为www.magedu.com；
      [ -z "$hostName" -o "$hostName" == "localhost.localdomain" ] && hostname=www.magedu.com 
      [ -z $var3 ] && var3="hello world"
脚本的状态返回值：
			
     默认是脚本中执行的最后一条件命令的状态返回值；
			
     自定义状态退出状态码：
				
        exit  [n]：n为自己指定的状态码；
					
    注意：shell进程遇到exit时，即会终止，因此，整个脚本执行即为结束；（重要）
					
	
向脚本传递参数：
		
    位置参数变量
 myscript.sh  argu1 argu2
			
    引用方式：
$1,  $2, ..., ${10}, ${11}, ...
				
			
    轮替：
shift  [n]：位置参数轮替；
				
		

练习：写一脚本，通过命令传递两个文本文件路径给脚本，计算其空白行数之和；
			
			
    #!/bin/bash
			#
			
        file1_lines=$(grep "^$" $1 | wc -l)
			
        file2_lines=$(grep "^$" $2 | wc -l)

			
        echo "Total blank lines: $[$file1_lines+$file2_lines]"	
			
	
特殊变量：
		
    $0：脚本文件路径本身；
		
    $#：脚本参数的个数；
		
    $*：所有参数
		
    $@：所有参数

（一般使用$@）	
过程式编程语言的代码执行顺序：
		
   顺序执行：逐条运行；
		
   选择执行：
代码有一个分支：条件满足时才会执行；
			
             两个或以上的分支：只会执行其中一个满足条件的分支；
		
   循环执行：
代码片断（循环体）要执行0、1或多个来回；
			
		

   选择执行：
			
     单分支的if语句：
				
     if  测试条件
;then
					
          代码分支
				
     fi
			
			
     双分支的if语句：
				
     if  测试条件; then
					
        条件为真时执行的分支
				
    else
					
        条件为假时执行的分支
				
     fi
				
		
示例：通过参数传递一个用户名给脚本，此用户不存时，则添加之；
			
   方法1==============
    #!/bin/bash
			
    #
			
    if ! grep "^$1\>" /etc/passwd &> /dev/null; then
	  或者if ! id $1 &>/dev/null;then			
        useradd $1
				
        echo $1 | passwd --stdin $1 &> /dev/null
(中间语句不需要加；）				
        echo "Add user $1 finished."
			
    fi
	
			
			
  方法2===============
  #!/bin/bash
		
  #
增加一段代码判断是否有用户输入			
  if [ $# -lt 1 ]; then
	(if到[之间要有空格）			
      echo "At least one username."
				
      exit 2
（退出整个shell脚步）		
  fi

			
  if ! grep "^$1\>" /etc/passwd &> /dev/null; then
				
      useradd $1
				
      echo $1 | passwd --stdin $1 &> /dev/null
				
      echo "Add user $1 finished."
			
  fi
  方法3===============		
				
			
  #!/bin/bash
			
  #
			
  if [ $# -lt 1 ]; then
				
    echo "At least one username."
				
    exit 2
			
  fi

			
  if grep "^$1\>" /etc/passwd &> /dev/null; then
				
        echo "User $1 exists."
			
      else
				
        useradd $1
				
        echo $1 | passwd --stdin $1 &> /dev/null
				
        echo "Add user $1 finished."
			
  fi			
			
		

练习1：通过命令行参数给定两个数字，输出其中较大的数值；
   方法1===============
			
   #!/bin/bash
			
   #
			
   if [ $# -lt 2 ]; then
				
        echo "Two integers."
				
        exit 2
			
   fi

			
   if [ $1 -ge $2 ]; then
				
        echo "Max number: $1."
			
   else
	
        echo "Max number: $2."
			
   fi


   方法2===============			
			
   #!/bin/bash
	
   #

			
   if [ $# -lt 2 ]; then
				
        echo "Two integers."
				
        exit 2
			
   fi

	   
   declare -i max=$1

			
   if [ $1 -lt $2 ]; then
				
     max=$2
			
   fi

			
     echo "Max number: $max."
					
		

练习2：通过命令行参数给定一个用户名，判断其ID号是偶数还是奇数；
(失败)
#!/bin/bash
# 
if [ $# -lt 1 ];then
       echo "please input a username"
       exit 2
fi
var=$(grep "$1\>" /etc/passwd|cut -d ':' -f 3)
var1=$(($var%2))
if [ $var1 -eq 1 ] ;then
       echo "the id of $1 is jishu"
      else 
       echo "the id of $1 is oushu"
fi
	
练习3：通过命令行参数给定两个文本文件名，如果某文件不存在，则结束脚本执行；
都存在时返回每个文件的行数，并说明其中行数较多的文件；

#!/bin/bash 
#
if [ $# -lt 2 ];then 
    echo "please input two filename"
    eixt 2
fi
var1=$(cat $1|wc -l)
var2=$(cat $2|wc -l)
echo "$var1"
echo "$var2"
if [ $var1 -ge $var2 ];then 
    echo "the more lines file is $var1"
  else 
    echo "the more lines file is $var2"
fi

		
		
    
练习：
	1、创建一个20G的文件系统，块大小为2048，文件系统ext4，卷标为TEST，要求此分区开机后自动挂载至/testing目录，且默认有acl挂载选项；
			
           (1) 创建20G分区；
	   
           (2) 格式化：
				
               mke2fs -t ext4 -b 2048 -L 'TEST' /dev/DEVICE
			
           (3) 编辑/etc/fstab文件
			              
               LABEL='TEST' 	/testing 	ext4 	defaults,acl 	0 0

		
        2、创建一个5G的文件系统，卷标HUGE，要求此分区开机自动挂载至/mogdata目录，文件系统类型为ext3；

		
        


bash脚本编程之用户交互：	
      read [option]... [name ...]
           -p 'PROMPT' prompt表示提示意思	
           -t TIMEOUT
      bash -n /path/to/some_script  检测脚本中的语法错误
      bash -x /path/to/some_script   调试执行

	


10-3
bash脚本编程
	
	
 过程式编程语言的执行流程：

     顺序执行
，选择执行
，循环执行
		
	
     选择执行：
		
       (1) &&, ||
（匹配命令执行）		
       (2) if语句
		
       (3) case语句
		
		
  if语句：三种格式
		     
   单分支的if语句
				
     if  CONDITION; then
					
     if-true-分支（没有；）				
     fi
				
			
  双分支的if语句
				
    if  CONDITION; then
					
       if-true-分支
				     
    else
					
       if-false-分支
				
    fi
				
			
 多分支的if语句
				
    if  CONDITION1; then
					
            条件1为真分支
				
        elif  CONDITION2; then
					
            条件2为真分支
				
        elif  CONDITION3; then
					
            条件3为真分支
				
         ....
	elif  CONDITIONn; then
				
					
            条件n为真分支
				
        else
					
            所有条件均不满足时的分支
		fi
				
				
    注意：即便多个条件可能同时都能满足，分支只会执行中其中一个，首先测试为“真”；
	
    示例：脚本参数传递一个文件路径给脚本，判断此文件的类型；
					
		
#!/bin/bash
					
#
					
if [ $# -lt 1 ]; then
					
    echo "At least on path."
						
    exit 1
					
fi

					
if ! [ -e $1 ]; then
						
     echo "No such file."
						
     exit 2
					
fi

	
if [ -f $1 ]; then
						
    echo "Common file."
					
 elif [ -d $1 ]; then
						
    echo "Directory."
					
 elif [ -L $1 ]; then
						    
    echo "Symbolic link."
					
 elif [ -b $1 ]; then
						
    echo "block special file."
			 
elif [ -c $1 ]; then
						
    echo "character special file."
					
 elif [ -S $1 ]; then
	    
    echo "Socket file."
					
 else
						
   echo "Unkown."
		
fi
注意：if语句可嵌套；

					
练习：写一个脚本
				
   (1) 传递一个参数给脚本，此参数为用户名；
				
   (2) 根据其ID号来判断用户类型：
0： 管理员
 1-999：系统用户
1000+：登录用户
		
#!/bin/bash
					
#
					
[ $# -lt 1 ] && echo "At least on user name." && exit 1

					
! id $1 &> /dev/null && echo "No such user." && exit 2

					
userid=$(id -u $1)

					
if [ $userid -eq 0 ]; then
						
         echo "root"
				  
elif [ $userid -ge 1000 ]; then
						
         echo "login user."
					
else
					 
         echo "System user."
					
fi										
					
			
练习：写一个脚本
	  
    (1) 列出如下菜单给用户：
					
       disk) show disks info;
					
       mem) show memory info;
	
       cpu) show cpu info;
					
         *) quit;

   (2) 提示用户给出自己的选择，而后显示对应其选择的相应系统信息； 
#!/bin/bash
					
#
			
cat << EOF
(<<表示输入结束，即当输入EOF时输入结束）					
   disk) show disks info
					
    mem) show memory info
				   
    cpu) show cpu info
					
     *) QUIT
					
EOF


可以用如下代码替换
   echo "disk) show disks info"	
   echo "mem) show memory info"
				   
   echo "cpu) show cpu info"
					
   echo "*) QUIT"
				
read -p "Your choice: " option

					
if [ "$option" == "disk" ]; then

   fdisk -l /dev/[sh]d[a-z]
			
elif [ "$option" == "mem" ]; then

   free -m
					
elif [ "$option" == "cpu" ];then

   lscpu
					
else
						
   echo "Unkown option."
		   
   exit 3
					
fi
					
	

循环执行： 将一段代码重复执行0、1或多次；
		   
           进入条件：条件满足时才进入循环；
		
           退出条件：每个循环都应该有退出条件，以有机会退出循环；
		
		
bash脚本：
			  
  for循环
			
  while循环
			
  until循环
			
		
  for循环：
两种格式：
				
     (1) 遍历列表

            进入条件：只要列表有元素，即可进入循环；
退出条件：列表中的元素遍历完成；				
     (2) 控制变量

         for ((初始值；限制值；执行步长））
           do 
                    程序段
         done				
			
    遍历列表：
				
      for  VARAIBLE  in  LIST; do
					
          循环体
				
     done
 
				
				 
LISTT列表的生成方式：
	    
    (1) 直接给出；
					
    (2) 整数列表
						
       (a) {start..end}
	，举例如下
[root@node1 ~]# echo {1..10} 
1 2 3 4 5 6 7 8 9 10
       (b) seq [start  [incremtal]] last
，举例如下
[root@node1 ~]# seq 10 2  20 
10
12
14
16
18
20

   (3) 返回列表的命令
	
   (4) glob 
					
   (5) 变量引用

	$@, $*
					
#!/bin/bash
				
#
				
for username in user21 user22 user23; do
			   
   if id $username &> /dev/null; then
						
      echo "$username exists."
					
   else
	      
     useradd $username && echo "Add user $username finished."
					
   fi
				
done
				
				

示例：求100以内所有正整数之和；
					
#!/bin/bash
				
#
					
declare -i sum=0

					
for i in {1..100}; do
							
   sum=$[$sum+$i]
					
done

					
echo $sum


	
				
练习：
					
 1、分别求100以内所有偶数之和，以及所有奇数之和；

#!/bin/bash
#
declare -i jishu=0
declare -i oushu=0

for i in $(seq 1 2 100);do
    jishu=$[$jishu+$i]
done

for i in $(seq 2 2 100);do
    oushu=$[$oushu+$i]
done
echo "the sum of jishu is $jishu"
echo "the sum of oushu is $oushu"
					
 2、计算当前系统上的所有用的id之和；					
 3、通过脚本参数传递一个目录给脚本，而后计算此目录下所有文本文件的行数之和；并说明此类文件的总数；
#!/bin/bash
				
#

read -p "please input a dirname:" filename
declare -i b=0	a 				
for i in  $filename; do
						
   if [ -f $i ]; then

       a=$(cat $i|wc -l)
       b=$[$a+$b] 										
   fi					
			
done

echo $b	


	


12-2
bash脚本编程

	
  顺序执行
	
  选择执行： if, case
	
  循环执行：for, while, until 
	
	
    for循环格式：
		
      for  VARAIBLE  in  LIST; do
			
      循环体
		
   done
		
	
 while循环：
		
   while  CONDITION; do
			
      循环体
			
      循环控制变量修正表达式
		
   done
		
		
   进入条件：CONDITION测试为”真“
		
   退出条件：CONDITION测试为”假“
		
	
until循环：
		
   until  CONDITION; do
			
      循环体
			
      循环控制变量修正表达式
		
   done
		
		
   进入条件：CONDITION测试为”假“
		
   退出条件：CONDITION测试为”真“		
		
		
示例：求100以内所有正整数之和；
			
			
#!/bin/bash
			
#
			
declare -i sum=0
			
declare -i i=1

			
until [ $i -gt 100 ]; do
				
   let sum+=$i
				
   let i++
			
done

			
echo $sum			

			
			
#!/bin/bash
		
#
			
declare -i sum=0
			
declare -i i=1

			
  while [ $i -le 100 ]; do
				
       let sum+=$i
				
       let i++
			
done

			
echo $sum			

	
练习：分别使用for, while, until实现
		
1、分别求100以内所有偶数之和，100以内所奇数之和；
		
2、创建10个用户，user101-user110；密码同用户名；
		
3、打印九九乘法表；
		
4、打印逆序的九九乘法表；
		
		
1X1=1
		
1X2=2  2X2=4
		
1X3=3  2X3=6  3X3=9
		
		
外循环控制乘数，内循环控制被乘数；
			
#!/bin/bash
			
#
			
for j in {1..9}; do
				
   for i in $(seq 1 $j); do
	此处只能是$(seq 1 $j)，不能写成{1..$j},原因未知				
     echo -n -e "${i}X${j}=$[${i}*${j}]\t"
 （n表示不适用换行符，e表示启用反斜杠的解释，也就是使\t生效，\t是水平空格符）		
  done

     echo 启动换行作用						
done	
			
也可以修改成如下代码
#!/bin/bash 
#
for ((j=1;j<=9;j++)); do（切记这里是双括号）
    for i in $(seq 1 $j); do
         echo -n   -e "${i}X${j}=$[${i}*${j}]\t"
    done
         echo 
done


14-4
bash脚本编程：
	
顺序执行
	
选择分支
	
循环执行
		
  for, while, until
		
		
进入条件：
			
  for：列表元素非空；
			
  while：条件测试结果为“真”
			
  unitl：条件测试结果为“假”
	退出条件：
			
  for：列表元素遍历完成；
			
  while：条件测试结果为“假”
			
  until：条件测试结果为“真”
		
  循环控制语句：
			
     continue：提前结束本轮循环，而直接进入下一轮循环判断；
				
 while  CONDITION1; do
		        
        CMD1
					
        ...
					
     if  CONDITION2; then
						       
        continue
					
     fi
					
       CMDn
					
        ...
				
done
				
				
示例：求100以内所有偶数之和；										
	
#!/bin/bash
					
#
					
declare -i evensum=0
				
declare -i i=0

					
while [ $i -le 100 ]; do
						
   let i++
					   
   if [ $[$i%2] -eq 1 ]; then
							
       continue
						
   fi
			
let evensum+=$i
					
done

					
echo "Even sum: $evensum"				
			
			

break：提前跳出循环				
  while  CONDITION1; do			
      CMD1
       ...			
    if  CONDITION2; then			
      break		    
    fi			
done		
创建死循环：	
    while true; do			
     循环体		   
   done		
退出方式：
某个测试条件满足时，让循环体执行break命令；
示例：求100以内所奇数之和			
#!/bin/bash				
#		
declare -i oddsum=0			
declare -i i=1			
while true; do			
   let oddsum+=$i			   
   let i+=2		
  if [ $i -gt 100 ]; then					
    break					
  fi	
done
sleep命令：delay for a specified amount of time		
sleep NUMBER


				
			
练习：每隔3秒钟到系统上获取已经登录用户的用户的信息；其中，如果logstash用户登录了系统，则记录于日志中，并退出；

#!/bin/bash
		
#
				
while true; do
					
   if who | grep "^logstash\>" &> /dev/null; then
						
     break
					
   fi
					
    sleep 3
				
done

				
echo  "$(date +"%F %T") logstash logged on" >> /tmp/users.log	
				
				

#!/bin/bash
				
#
	
until who | grep "^logstash\>" &> /dev/null; do
					
  sleep 3
				
done

				
echo "$(date +"%F %T") logstash logged on" >> /tmp/users.log
			
			
		
while循环的特殊用法（遍历文件的行）：
		     
while  read  VARIABLE; do
				
            循环体；
			
     done  <  /PATH/FROM/SOMEFILE
			
			
依次读取/PATH/FROM/SOMEFILE文件中的每一行，且将基赋值给VARIABLE变量；

			
			
				
							
		
for循环的特殊用法：
			
 for  ((控制变量初始化;条件判断表达式;控制变量的修正语句)); do
         代码段
 done
			
			
控制变量初始化：仅在循环代码开始运行时执行一次；
			
控制变量的修正语句：每轮循环结束会先进行控制变量修正运算，而后再做条件判断；

			
			
示例：求100以内所有正整数之和
				
#!/bin/bash
	#
				
declare -i sum=0

				
for ((i=1;i<=100;i++)); do
					
     let sum+=$i
				
 done

				
echo "Sum: $sum."
				
			
示例：打印九九乘法表
		#!/bin/bash
				
#
				
for ((j=1;j<=9;j++)); do
					
   for ((i=1;i<=j;i++)); do
						
     echo -e -n "${i}X${j}=$[${i}*${j}]\t"
					
   done
				     
     echo
				
done				
							


回顾：循环
	
	
 循环控制：  break, continue
	
  while，for循环的特殊用法
	
	
  for (()); do
		
    循环体
	
  done
	
	
  while read VARAIBLE; do
		
   循环体
	
  done < /PATH/FROM/SOMEFILE
	


bash脚本编程：

	
   case语句：
		
		
   多分支if语句：
			
   if CONDITION1; then
				
      分支1
	     
   elif  CONDITION2; then
				
      分支2
			
      ...
			
   else 			
      分支n
	   
   fi
	
		
		
示例1：显示一个菜单给用户；
			
    cpu) display cpu information
			
    mem) display     memory information
			
    disk) display disks information
			
    quit) quit
			
			
要求：(1) 提示用户给出自己的选择；
				   
      (2) 正确的选择则给出相应的信息；否则，则提示重新选择正确的选项；
				   
				
#!/bin/bash
				
#
				
cat << EOF
				
   cpu) display cpu information
				  
   mem) display memory infomation
				
   disk) display disks information
				
   quit) quit
				   
===============================
				
EOF

				
read -p "Enter your option: " option

				
while [ "$option" != "cpu" -a "$option" != "mem" -a "$option" != "disk" -a "$option" != "quit" ]; do
					
    echo "cpu, mem, disk, quit"
		    
    read -p "Enter your option again: " option
				
done

				
if [ "$option" == "cpu" ]; then
			
        lscpu
				
   elif [ "$option" == "mem" ]; then
					
        free -m
				
   elif [ "$option" == "disk" ]; then
					
        fdisk -l /dev/[hs]d[a-z]
				
   else
					
   echo "quit"
					
   exit 0
				
fi
		
	
			
case语句的语法格式：
				
				
case  $VARAIBLE  in  
				 
      PAT1)
					
       分支1
					
       ;;
	      
        PAT2)
					
       分支2
					
       ;;
				
       ...
				     
       *)
					
      支n
					
       ;;
				
esac

				
			
case支持glob风格的通配符：
					
  *：任意长度的任意字符；
					
  ?：任意单个字符；
			  
 []：范围内任意单个字符；
					
 a|b：a或b；

				
			


函数：function 
		
过程式编程：代码重用
			
模块化编程
			
结构化编程 
			
			
把一段独立功能的代码当作一个整体，并为之一个名字；命名的代码段，此即为函数；
			
			
注意：定义函数的代码段不会自动执行，在调用时执行；所谓调用函数，在代码中给定函数名即可；
				
函数名出现的任何位置，在代码执行时，都会被自动替换为函数代码；
				
		
语法一：
（重要）			
   function  f_name  {
				
       ...函数体...
			
   }
			
		
语法二：
(重要）			
   f_name()  {
				
     ...函数体...
			
   }
			
		
函数的生命周期：每次被调用时创建，返回时终止；
			
其状态返回结果为函数体中运行的最后一条命令的状态结果；
			
自定义状态返回值，需要使用：return
				
          return [0-255]
					
            0: 成功
					
            1-255: 失败
				
		

示例：定一个用户名，取得用户的id号和默认shell；
		
#!/bin/bash
			
#

			
userinfo() {
				
   if id "$username" &> /dev/null; then
				  
   grep "^$username\>" /etc/passwd | cut -d: -f3,7
				
 else
					
   echo "No such user."
				  
   fi
			
}

			
username=$1
			
userinfo

			
username=$2
			
userinfo
			
			
		

		
函数返回值：
			
函数的执行结果返回值：
				
(1) 使用echo或printf命令进行输出；
				
(2) 函数体中调用的命令的执行结果；
			
函数的退出状态码：
				
(1) 默认取决于函数体中执行的最后一条命令的退出状态码；
				
(2) 自定义：return
				
		
函数可以接受参数：
			
    传递参数给函数：
				
    在函数体中当中，可以使用$1，$2, ...引用传递给函数的参数；还可以函数中使用$*或$@引用所有参数，$#引用传递的参数的个数；
				
    在调用函数时，在函数名后面以空白符分隔给定参数列表即可，例如，testfunc  arg1 arg2 arg3 ...

				
			

练习：写一个脚本；
			
使用函数实现ping一个主机来测试主机的在线状态；主机地址通过参数传递给函数；
			
主程序：测试172.16.1.1-172.16.67.1范围内各主机的在线状态；

pin() {
     ping $1 &>/dev/null
     retval=$?
     return $retval
}
for n in {1..66};do
  for i in {1..255};do
     pin 172.16.$n.$i
     retval=$?

     if [ $retval -eq 0 ];then 
       echo "172.16.$n.$i is active"
     fi
  done
done
pin 172.16.67.1


额外一个简单实列：ping ip地址是否可以ping通
#!/bin/bash
#
pin() {
     ping -c 3  $1 &>/dev/null
     retval=$?
     return  $retval 
}
for n in 192.168.139.171 192.168.139.169 192.168.1.1;do
     pin  $n 
     retval=$?
     if [ $retval -eq 0 ];then 
       echo "$n is active"
      else 
       echo "$n is inactive"
     fi
done


			
		
练习：写一个脚本；
			
打印NN乘法表；

			
		
变量作用域：
			
   局部变量：作用域是函数的生命周期；在函数结束时被自动销毁；
				
   定义局部变量的方法：local VARIABLE=VALUE
		   
   本地变量：作用域是运行脚本的shell进程的生命周期；因此，其作用范围为当前shell脚本程序文件；

			
			

									
			
#!/bin/bash
				
#
				
fab() {
					
   if [ $1 -eq 1 ]; then
						
        echo -n "1 "
					
   elif [ $1 -eq 2 ]; then
						
        echo -n "1 "
					   
   else
						
        echo -n "$[$(fab $[$1-1])+$(fab $[$1-2])] "
					
   fi
				
}

	
for i in $(seq 1 $1); do
					
      fab $i
				
done
				
echo		
补充脚步：
#!/bin/bash 
#
declare -i c 
 a(){
   local -i b
   if [ $1 -le 2 ];then
      echo 2
   else
      b=$[$1*$(a $[$1-1])]
   fi
   return  $b 必须要加这一条命令，才能返回b的值，否则正常返回的是函数最后一条命令的执行状态码
 }
 read -p "please input a number:" nu
 a $nu 调用a函数
 d=$?
 echo $d 

bash脚本编程：
	
	
函数、case语言
		
      case语句：
			
case  $VARIABLE  in 
			
       PAT1)
				
          分支1
				
            ;;
			
       PAT2)
				
         分支2
				
            ;;
			
          *)
				
         分支n
				
           ;;
			
esac
			
			
PATTERN: GLOB, |

		
		
函数：结构化编程，代码重用；
			
 function f_name {
				
          函数体
			
  }
			
			
  f_name() {
				
           函数体 
			
   }
			
			
函数定义
			
  函数调用：给定函数名；
			
			
  局部变量：local  VARIABLE
		
	
  数组：

  程序=指令+数据			
  指令：
			
  数据：变量、文件
		
		
        变量：存储单个元素的内存空间；
		
        数组：存储多个元素的连续的内存空间；
			
  数组名：整个数组只有一个名字；
			
  数组索引：编号从0开始；
				
            数组名[索引]， 
${ARRAY_NAME[INDEX]}
				
			
  注意：bash-4及之后的版本，支持自定义索引格式，而不仅仅是0，1,2，...数字格式；
此类数组称之为“关联数组”
				
	  
  声明数组：

      declare  -a  NAME：声明索引数组；
			
      declare  -A  NAME：声明关联数组；
			
		
  数组中元素的赋值方式：
			
     (1) 一次只赋值一个元素；
				
        ARRAY_NAME[INDEX]=value
			
     (2) 一次赋值全部元素；
				
        ARRAY_NAME=("VAL1"  "VAL2"  "VAL3"  ...)
（多个元素之间是空格，切记）			
     (3) 只赋值特定元素；
				
        ARRAY_NAME=([0]="VAL1"  [3]="VAL4" ...)
				
				
     注意：bash支持稀疏格式的数组；
			
     (4) read  -a  ARRAY_NAME
（没有明白？）			
		
  引用数组中的元素：${ARRAY_NAME[INDEX]}
,注意：引用时，只给数组名，表示引用下标为0的元素；
			
		
  数组的长度（数组中元素的个数）:
${#ARRAY_NAME[*]}
,${#ARRAY_NAME[@]}

			
		
示例：生成10个随机数，并找出其中的最大值和最小值；
			
#!/bin/bash
			
#
			
declare -a  rand
			
declare -i max
declare -i min			
for i in {0..9}; do
				
  rand[$i]=$RANDOM

done
   max=${rand[0]}
for i in {1..9};do
   if [ ${rand[$i]} -ge $max ];then
       max=${rand[$i]}
	
   fi
done
    min=${rand[0]}
for i in {1..9};do
     if [ ${rand[$i]} -le $max ];then
       min=${rand[$i]}
	
   fi
done
   echo "MIN: $min"

			
   echo "MAX: $max"


练习：生成10个随机数，而后由小到大进行排序；(冒泡法，从右往左两两之间做比较,注意细节问题）
#!/bin/bash 
#
declare -a rand
for i  in {0..3}; do
     rand[$i]=$RANDOM
done
for i in {0..3};do
    for ((j=3;j>$i;j--));do
       if [ ${rand[$j]} -le ${rand[$(($j-1))]} ];then
          min=${rand[$j]}
          rand[$j]=${rand[$(($j-1))]}
          rand[$[$j-1]]=$min
       fi
     done
done
echo "${rand[@]}

练习：生成10个随机数，而后由大到小进行排序；
#!/bin/bash 
#
declare -a rand
for i  in {0..3}; do
     rand[$i]=$RANDOM
done
for i in {0..3};do
    for ((j=3;j>$i;j--));do
       if [ ${rand[$j]} -ge ${rand[$(($j-1))]} ];then
          min=${rand[$(($j-1))]}
          rand[$(($j-1))]=${rand[$j]}
          rand[$j]=$min
       fi
     done
done
echo "${rand[@]

			
		
  引用数组中的所有元素：
${ARRAY_NAME[*]}
,${ARRAY_NAME[@]}
			
			
  数组元素切片： ${ARRAY_NAME[@]:offset:number}
	,offset：要路过的元素个数；
number：要取出的元素个数；省略number时，表示取偏移量之后的所有元素；
				
  向非稀疏格式数组中追加元素：
ARRAY_NAME[${#ARRAY_NAME[*]}]=
			
		
  删除数组中的某元素：
unset  ARRAY[INDEX]
			
		
  关联数组：

declare  -A  ARRAY_NAME
				
ARRAY_NAME=([index_name1]="value1"  [index_name2]="value2" ...)
	
			
	
bash的内置字符串处理工具：
---详细参考鸟哥基础篇313页的解释		
		
     字符串切片：
${var:offset:number}
				
     取字符串的子串；
				
     取字符串的最右侧几个字符：${var:  -length}
，注意：冒号后必须有一个空白字符；

					
		
     变量内容的删除：
     
${var#*word}： 其中word是指定的分隔符；功能：自左而右，查找var变量所存储的字符串中，第一次出现的word分隔符，删除字符串开头至此分隔符之间的所有字符；
		     ${var##*word}：其中word是指定的分隔符；功能：自左而右，查找var变量所存储的字符串中，最后一次出现的word分隔符，删除字符串开头至此分隔符之间的所有字符；
		     mypath="/etc/init.d/functions"
				
     ${mypath##*/}:   functions
				
     ${mypath#*/}:  etc/init.d/functions
				
			
     ${var%word*}：其中word是指定的分隔符；功能：自右而左，查找var变量所存储的字符串中，第一次出现的word分隔符，删除此分隔符至字符串尾部之间的所有字符；
		     ${var%%word*}：其中word是指定的分隔符；功能：自右而左，查找var变量所存储的字符串中，最后一次出现的word分隔符，删除此分隔符至字符串尾部之间的所有字符；
		     mypath="/etc/init.d/functions"
				
     ${mypath%/*}:  /etc/init.d
				
				
     url=http://www.magedu.com:80
					
     ${url##*:}
					
     ${url%%:*}
	
				
		
    变量内容的查找替换：
	
    ${var/PATTERN/SUBSTI}： 查找var所表示的字符串中，第一次被PATTERN所匹配到的字符串，将其替换为SUBSTI所表示的字符串；
			
    ${var//PATTERN/SUBSTI}：查找var所表示的字符串中，所有被PATTERN所匹配到的字符串，并将其全部替换为SUBSTI所表示的字符串；
			
			    ${var/#PATTERN/SUBSTI}：查找var所表示的字符串中，行首被PATTERN所匹配到的字符串，将其替换为SUBSTI所表示的字符串；
			
    ${var/%PATTERN/SUBSTI}：查找var所表示的字符串中，行尾被PATTERN所匹配到的字符串，将其替换为SUBSTI所表示的字符串；
						
	          注意：PATTERN中使用glob风格和通配符；
			
		
    查找删除：
			
    ${var/PATTERN}：以PATTERN为模式查找var字符串中第一次的匹配，并删除之；
			
    ${var//PATERN}
			
    ${var/#PATTERN}
：行首			
    ${var/%PATTERN}
；行尾			
		
   字符大小写转换：
			
    ${var^^}：把var中的所有小写字符转换为大写；
			
    ${var,,}：把var中的所有大写字符转换为小写；
	
		
		
   变量赋值：
（难理解）			
    ${var:-VALUE}：如果var变量为空，或未设置，那么返回VALUE；否则，则返回var变量的值； 
			
    ${var:=VALUE}：如果var变量为空，或未设置，那么返回VALUE，并将VALUE赋值给var变量；否则，则返回var变量的值；
      上面两者的区别在于是否有赋值 
			
    ${var:+VALUE}：如果var变量不空，则返回VALUE；
			
    ${var:?ERROR_INFO}：如果var为空，或未设置，那么返回ERROR_INFO为错误提示；否则，返回var值；

[root@localhost nginx]# var=${var-china}
[root@localhost nginx]# echo $var
china
这就能解释/etc/rc.d/init.d/httpd  里面的如下代码含义了			
	
httpd=${HTTPD-/usr/sbin/httpd}    表示如果HTTPD变量为空，则把字符串/usr/sbin/httpd赋值给变量httpd。为什么要写成两个不同的httpd和HTTPD变量呢?
pidfile=${PIDFILE-/var/run/httpd/httpd.pid}
lockfile=${LOCKFILE-/var/lock/subsys/httpd}
STOP_TIMEOUT=${STOP_TIMEOUT-10}



写一个脚本：
ping命令去查看172.16.1.1-172.16.67.1范围内的所有主机是否在线；在线的显示为up, 不在线的显示down，分别统计在线主机，及不在线主机数；
		
		
分别使用for, while和until循环实现。
		
			
#!/bin/bash
			
#
			
declare -i uphosts=0
			
declare -i downhosts=0

	  
for i in {1..67}; do
				
     if ping -W 1 -c 1 172.16.$i.1 &> /dev/null; then
					
        echo "172.16.$i.1 is up."
					
        let uphosts+=1
				
     else
					
        echo "172.16.$i.1 is down."
			
        let downhosts+=1
				
     fi
			
  done

			
echo "Up hosts: $uphosts, Down hosts: $downhosts."		
						
					
		

#!/bin/bash
			
#
			
declare -i uphosts=0
			
declare -i downhosts=0
			
declare -i i=1

			
hostping() {
			   
    if ping -W 1 -c 1 $1 &> /dev/null; then
					
      echo "$1 is up."
					
      return 0
			  
   else
					
      echo "$1 is down."
					
      return 1
				
    fi
			}

			
while [ $i -le 67 ]; do
				
      hostping 172.16.$i.1
				
      [ $? -eq 0 ] && let uphosts++ || let downhosts++
				      
let i++
			
done

			
echo "Up hosts: $uphosts, Down hosts: $downhosts."
					
				
	


提示用户输入一个IP地址或网络地址；获取其网络，并扫描其网段；
		
	
信号捕捉：
		
列出信号：
trap  -l
(trap表示陷阱，捕获意思）或者kill  -l
			
man  7  signal
		
			 
trap  'COMMAND'  SIGNALS
（多个COMMAND之间用；隔开）
常可以进行捕捉的信号：
HUP， INT 
			
		
示例：
				
#!/bin/bash
				
#
				
declare -a hosttmpfiles
				
trap  'mytrap'  INT

（表示interruput，当捕获到INT即ctrl+c命令时，就调用mytrap函数）	用在脚步的第一行	
 mytrap()  {
					
     echo "Quit"
					
     rm -f ${hosttmpfiles[@]}
	     
     exit 1
				
  }


				
for i in {1..50}; do
					
   tmpfile=$(mktemp /tmp/ping.XXXXXX)
					
   if ping -W 1 -c 1 172.16.$i.1 &> /dev/null; then
						
        echo  "172.16.$i.1 is up" | tee $tmpfile
					
     else
						
        echo "172.16.$i.1 is down" | tee $tmpfile
	   
   fi
					
hosttmpfiles[${#hosttmpfiles[*]}]=$tmpfile
				
done

			
rm -f ${hosttmpfiles[@]}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
普通脚步
案例：
[root@localhost picture]# vim test1.sh  主要考察shift的使用
#!/bin/bash
#
while [ $# -gt 0 ];do
      echo "$@"
      shift
done
[root@localhost picture]# bash test1.sh   a b c d e
a b c d e
b c d e
c d e
d e
e

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
系统脚本案例:
			
           (1) 列出当前系统识别到的所有磁盘设备；
			
           (2) 如磁盘数量为1，则显示其空间使用信息；
否则，则显示最后一个磁盘上的空间使用信息；
               #!/bin/bash 
               #
               disks=$(fdisk -l|grep "^Disk /dev/sd[a-z]"|wc -l
)     "^Disk /dev/sd[a-z]"必须要加双引号或单引号				
               if [ $disks -eq 1 ]; then 
				
                       fdisk -l /dev/[hs]da
				
                  else 
					
                       fdisk -l $(fdisk -l /dev/[sh]d[a-z] | grep -o "^Disk /dev/[sh]d[a-]" | tail -1 | cut -d' ' -f2)
		      
               fi


系统脚本案例:查看指定的磁盘信息	
    #!/bin/bash
		
    # 	
    read  -p  "Enter a disk name: "  diskname		
    [ -z "$diskname" ] && echo "please input a diskname"  && exit 1

	   
    if fdisk -l | grep "^Disk $diskname" &> /dev/null; then
		    
          fdisk -l $diskname		
       else
		    
          echo "Wrong disk name."
		          
          exit 2
		
   fi

系统脚本案例：判断/var/log目录下的每一个文件的内容类型
					
#!/bin/bash
				
#
					
for filename in /var/log/*; do
						
   if [ -f $filename ]; then
				
      echo "Common file."
						
   elif [ -d $filename ]; then
							
      echo "Directory."
						
   elif [ -L $filename ]; then
							
      echo "Symbolic link."
						
   elif [ -b $filename ]; then
							
      echo "block special file."
		   
   elif [ -c $filename ]; then
							
      echo "character special file."
				   
   elif [ -S $filename ]; then
							
      echo "Socket file."
						
   else
		 
      echo "Unkown."
						
   fi					
			
done

系统脚本案例：找出ID号为偶数的用户，显示其用户名、ID及默认shell；
				
#!/bin/bash
				
#
				
while read line; do
			      
      userid=$(echo $line | cut -d: -f3)
					
      username=$(echo $line | cut -d: -f1)
					      
      usershell=$(echo $line | cut -d: -f7)

					
      if [ $[$userid%2] -eq 0 ]; then
						
            echo "$username, $userid, $usershell."
					
      fi
			
done < /etc/passwd


系统脚本案例：写一个服务框架脚本；---调试该脚本
				
				
(1) 此脚本可接受start, stop, restart, status四个参数之一；
				
(2) 如果参数非此四者，则提示使用帮助后退出；
				
(3) start，则创建lockfile，并显示启动； 
    stop， 则删除lockfile，并显示停止；
    restart，则先删除此文件再创建此文件，而后显示重启完成；
 status， 如果lockfile存在，则显示running，否则，则显示为stopped.

		
vim /root/testservice 		
					
#!/bin/bash
					
#
					
# chkconfig: - 50 50
（运行级别，开机顺序，关机顺序）
# 					
					
prog=$(basename $0)
	
lockfile=/var/lock/subsys/$prog

					
case  $1  in
					
      start)
				  
           if [ -f $lockfile ]; then
							
               echo "$prog is running yet."
						 
            else
							
               touch $lockfile
							
               [ $? -eq 0 ] && echo "start $prog finshed."
						
           fi
						
           ;;
					
       stop)
				  
           if [ -f $lockfile ]; then
							
              rm -f $lockfile
							             
              [ $? -eq 0 ] && echo "stop $prog finished."
						
           else
							
              echo "$prog is not running."
						
          fi
						
            ;;
					
      restart)
			   
           if [ -f $lockfile ]; then
							
                rm -f $lockfile
							        
                touch $lockfile
							
                echo "restart $prog finished."
						
             else
					
                touch -f $lockfile
							 
                echo "start $prog finished."
						    
            fi
						
           ;;
					
       status)
						
            if [ -f $lockfile ]; then
			
                echo "$prog is running"
						
             else
							        
                echo "$prog is stopped."
						
            fi
						
           ;;
					           
           *)
						
            echo "Usage: $prog {start|stop|restart|status}"
						
            exit 1
				
esac

			
	
cp /etc/testservice   /etc/rc.d/init.d/testservice
 

系统脚本：服务脚本框架
			
#!/bin/bash
			
#
			
# chkconfig: - 50 50
			
# description: test service script
			
#
			
  prog=$(basename $0)
			
  lockfile=/var/lock/subsys/$prog

	  
  start() {
				
            if [ -f $lockfile ]; then
					
            echo "$prog is running yet."
				
        else
					
            touch $lockfile
					
            [ $? -eq 0 ] && echo "start $prog finshed."
				           
            fi
			
  }

			
  stop() {
				
           if [ -f $lockfile ]; then
					
           rm -f $lockfile
		   
           [ $? -eq 0 ] && echo "stop $prog finished."
				
        else
					
           echo "$prog is not running."
				
            fi
			
  }
			
  status() {
				
            if [ -f $lockfile ]; then
			   
            echo "$prog is running"
				
         else
					
            echo "$prog is stopped."
				            
            fi
			
  }

			
   usage() {
				
         echo "Usage: $prog {start|stop|restart|status}"
			
   }

			

case $1 in
			
     start)
				
     start 
     ;;
			
      stop)
				
      stop 
     ;;
		   
   restart)
				
      stop
				
      start 
     ;;
			
    status)
				
    status 
     ;;
			
         *)
				
      usage
				
      exit 1 
     ;;
（在最后加；；）			

esac
			
chmod +x /etc/rc.d/init.d/testservice
chkconfig --add testservice 
chkconfig --list testservice

系统脚本案例：添加10个用户，
添加用户的功能使用函数实现，用户名做为参数传递给函数；
				
					
#!/bin/bash
					
#
		
# 5: user exists

					
addusers() {
						
       if id $1 &> /dev/null; then
	        
       return 5
	（自定义退出状态码）					
  else
							
       useradd $1

       retval=$?
							
       return $retval
	（自定义退出状态码）				    
    fi
					
}

		
			
for i in {1..10}; do
						
  addusers ${1}${i}
						
  retval=$?
 （这条命令非常重要，表示获取函数的退出状态码）	  
  if [ $retval -eq 0 ]; then
							
       echo "Add user ${1}${i} finished."
		  
  elif [ $retval -eq 5 ]; then
							
       echo "user ${1}${i} exists."
				  
  else
							
       echo "Unkown Error."
						
  fi
				
done


系统脚本案例：局部变量和本地变量的区别		
#!/bin/bash
				
#
				
name=tom

				
setname() {
					
        local name=jerry
					
        echo "$name"
				
}

				
setname
			
echo "$name"


		
		
系统脚本案例：函数递归，函数直接或间接调用自身；
				
			   
10!=10*9!=10*9*8!=10*9*8*7!=...
				
n
!=n*(n-1)!=n*(n-1)*(n-2)!=

...
			
#!/bin/bash
	
#
				
fact() {
					
    if [ $1 -eq 0 -o $1 -eq 1 ]; then
					 
         echo 1
					
      else
						
         echo $[$1*$(fact $[$1-1])]
	（递归调用函数的方式就是命令引用的方式，务必记住）				    
    fi
				
}

				
fact $1	（脚本执行时必须要传递一个参数进去）				
					
					
			
1,1,2,3,5,8,13,21,...


系统脚本案例：定义一个数组，数组中的元素是/var/log目录下所有以.log结尾的文件；统计其下标为偶数的文件中的行数之和；
			
				#!/bin/bash
				
#
				
declare -a files
				
files=(/var/log/*.log)

	                    全部元素赋值的方式，仔细理解			
declare -i lines=0

				
for i in $(seq 0 $[${#files[*]}-1]); do
	    ${#files[*]}表示统计所有元素的个数				
     if [ $[$i%2] -eq 0 ]; then
						
     let lines+=$(wc -l ${files[$i]} | cut -d ' ' -f1)
					
     fi
				
done

				
echo "Lines: $lines."
	
系统脚本案例：		
(1) 提示用户输入一个可执行命令的名称；
		
(2) 获取此命令所依赖到的所有库文件列表；
		
(3) 复制命令至某目标目录（例如/mnt/sysroot，即把此目录当作根）下的对应的路径中
			
     bash,  /bin/bash  ==> /mnt/sysroot/bin/bash
			
     useradd, /usr/sbin/useradd  ==>  /mnt/sysroot/usr/sbin/useradd
		
(4) 复制此命令依赖到的所有库文件至目标目录下的对应路径下；
			
     /lib64/ld-linux-x8664.so.2  ==>  /mnt/sysroot/lib64/ld-linux-x8664.so.2
			
		
进一步：
每次复制完成一个命令后，不要退出，而是提示用户继续输入要复制的其它命令，并重复完成如上所描述的功能；直到用户输入“quit”退出脚本；

系统脚本案例：实现能探测C类(110开头）、B类（10开头）或A类（0开头）网络中的所有主机是否在线；

A类地址：0.xxxxxxxx.xxxxxxxx.xxxxxxxx-127.xxxxxxxx.xxxxxxxx.xxxxxxxx
B类地址：128.xxxxxxxx.xxxxxxxx.xxxxxxxx-191.xxxxxxxx.xxxxxxxx.xxxxxxxx
C类地址：192.xxxxxxxx.xxxxxxxx.xxxxxxxx-223.xxxxxxxx.xxxxxxxx.xxxxxxxx	
#!/bin/bash 
#
pin() {
    for a in {0..255};do
       for b in {0..255};do
         for c in {0..255};do
           if ping -W 1 -c 1 $1.$a.$b.$c  &> /dev/null; then
	(w表示超时时长）					
              echo "$1.$a.$b.$c is up"
					
          else
						  
             echo "$1.$a.$b.$c is down."
					
           fi
	  
         done
       done
    done
}
ping


案例：
利用shell脚本实现对一个磁盘进行分区格式化挂载
#!/bin/bash
#
echo "A disk is to init"
fdisk -l | grep -o "^Disk /dev/[sh]d[a-z]"
read -p "Your choice: " choice              

if [ $choice == 'q' -o $choice == 'Q' -o $choice == 'quit' -o $choice == 'Quit' ];then  
         echo "The shell is quiting"
         exit 5
elif fdisk -l | grep -o "^Disk /dev/[sh]d[a-z]"|grep $choice &>/dev/null;then
        echo "Disk $choice is to start,please wait"
        dd if=/dev/zero of=$choice bs=512 count=1 &>/dev/null   
        echo "n
        p
        1

        +1G
        n
        p
        2

        +6G
        w" | fdisk $choice &>/dev/null
else
        echo "Wrong  choice Y|y or N|n"
fi

partprobe $choice
sync
sleep 3
mkfs -t ext4 ${choice}1 &>/dev/null     
mkfs -t ext4 ${choice}2 &>/dev/null  
mkdir /data1 &>/dev/null
mkdir /data2 &>/dev/null
mount ${choice}1 /data1
mount ${choice}2 /data2
echo "Init finish"
